/* tslint:disable */
/* eslint-disable */
/**
 * int100grammer
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AppControllerGetAllUsers200Response } from '../models';
/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerEnqueue: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('appControllerEnqueue', 'id', id)
            const localVarPath = `/enqueue/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} skip 
         * @param {number} take 
         * @param {object} cursor 
         * @param {boolean} business 
         * @param {boolean} hasPhone 
         * @param {boolean} hasEmail 
         * @param {boolean} hasSite 
         * @param {string} country 
         * @param {boolean} hasCountry 
         * @param {string} followersMax 
         * @param {string} followersMin 
         * @param {object} orderBy 
         * @param {string} [filterUsername] 
         * @param {string} [filterFullName] 
         * @param {string} [filterSite] 
         * @param {string} [filterEmail] 
         * @param {string} [filterBusinessCategory] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetAllUsers: async (skip: number, take: number, cursor: object, business: boolean, hasPhone: boolean, hasEmail: boolean, hasSite: boolean, country: string, hasCountry: boolean, followersMax: string, followersMin: string, orderBy: object, filterUsername?: string, filterFullName?: string, filterSite?: string, filterEmail?: string, filterBusinessCategory?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'skip' is not null or undefined
            assertParamExists('appControllerGetAllUsers', 'skip', skip)
            // verify required parameter 'take' is not null or undefined
            assertParamExists('appControllerGetAllUsers', 'take', take)
            // verify required parameter 'cursor' is not null or undefined
            assertParamExists('appControllerGetAllUsers', 'cursor', cursor)
            // verify required parameter 'business' is not null or undefined
            assertParamExists('appControllerGetAllUsers', 'business', business)
            // verify required parameter 'hasPhone' is not null or undefined
            assertParamExists('appControllerGetAllUsers', 'hasPhone', hasPhone)
            // verify required parameter 'hasEmail' is not null or undefined
            assertParamExists('appControllerGetAllUsers', 'hasEmail', hasEmail)
            // verify required parameter 'hasSite' is not null or undefined
            assertParamExists('appControllerGetAllUsers', 'hasSite', hasSite)
            // verify required parameter 'country' is not null or undefined
            assertParamExists('appControllerGetAllUsers', 'country', country)
            // verify required parameter 'hasCountry' is not null or undefined
            assertParamExists('appControllerGetAllUsers', 'hasCountry', hasCountry)
            // verify required parameter 'followersMax' is not null or undefined
            assertParamExists('appControllerGetAllUsers', 'followersMax', followersMax)
            // verify required parameter 'followersMin' is not null or undefined
            assertParamExists('appControllerGetAllUsers', 'followersMin', followersMin)
            // verify required parameter 'orderBy' is not null or undefined
            assertParamExists('appControllerGetAllUsers', 'orderBy', orderBy)
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (take !== undefined) {
                localVarQueryParameter['take'] = take;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (business !== undefined) {
                localVarQueryParameter['business'] = business;
            }

            if (hasPhone !== undefined) {
                localVarQueryParameter['hasPhone'] = hasPhone;
            }

            if (hasEmail !== undefined) {
                localVarQueryParameter['hasEmail'] = hasEmail;
            }

            if (hasSite !== undefined) {
                localVarQueryParameter['hasSite'] = hasSite;
            }

            if (country !== undefined) {
                localVarQueryParameter['country'] = country;
            }

            if (hasCountry !== undefined) {
                localVarQueryParameter['hasCountry'] = hasCountry;
            }

            if (followersMax !== undefined) {
                localVarQueryParameter['followersMax'] = followersMax;
            }

            if (followersMin !== undefined) {
                localVarQueryParameter['followersMin'] = followersMin;
            }

            if (filterUsername !== undefined) {
                localVarQueryParameter['filterUsername'] = filterUsername;
            }

            if (filterFullName !== undefined) {
                localVarQueryParameter['filterFullName'] = filterFullName;
            }

            if (filterSite !== undefined) {
                localVarQueryParameter['filterSite'] = filterSite;
            }

            if (filterEmail !== undefined) {
                localVarQueryParameter['filterEmail'] = filterEmail;
            }

            if (filterBusinessCategory !== undefined) {
                localVarQueryParameter['filterBusinessCategory'] = filterBusinessCategory;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appControllerEnqueue(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.appControllerEnqueue(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} skip 
         * @param {number} take 
         * @param {object} cursor 
         * @param {boolean} business 
         * @param {boolean} hasPhone 
         * @param {boolean} hasEmail 
         * @param {boolean} hasSite 
         * @param {string} country 
         * @param {boolean} hasCountry 
         * @param {string} followersMax 
         * @param {string} followersMin 
         * @param {object} orderBy 
         * @param {string} [filterUsername] 
         * @param {string} [filterFullName] 
         * @param {string} [filterSite] 
         * @param {string} [filterEmail] 
         * @param {string} [filterBusinessCategory] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appControllerGetAllUsers(skip: number, take: number, cursor: object, business: boolean, hasPhone: boolean, hasEmail: boolean, hasSite: boolean, country: string, hasCountry: boolean, followersMax: string, followersMin: string, orderBy: object, filterUsername?: string, filterFullName?: string, filterSite?: string, filterEmail?: string, filterBusinessCategory?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppControllerGetAllUsers200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.appControllerGetAllUsers(skip, take, cursor, business, hasPhone, hasEmail, hasSite, country, hasCountry, followersMax, followersMin, orderBy, filterUsername, filterFullName, filterSite, filterEmail, filterBusinessCategory, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {DefaultApiAppControllerEnqueueRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerEnqueue(requestParameters: DefaultApiAppControllerEnqueueRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.appControllerEnqueue(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiAppControllerGetAllUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetAllUsers(requestParameters: DefaultApiAppControllerGetAllUsersRequest, options?: AxiosRequestConfig): AxiosPromise<AppControllerGetAllUsers200Response> {
            return localVarFp.appControllerGetAllUsers(requestParameters.skip, requestParameters.take, requestParameters.cursor, requestParameters.business, requestParameters.hasPhone, requestParameters.hasEmail, requestParameters.hasSite, requestParameters.country, requestParameters.hasCountry, requestParameters.followersMax, requestParameters.followersMin, requestParameters.orderBy, requestParameters.filterUsername, requestParameters.filterFullName, requestParameters.filterSite, requestParameters.filterEmail, requestParameters.filterBusinessCategory, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for appControllerEnqueue operation in DefaultApi.
 * @export
 * @interface DefaultApiAppControllerEnqueueRequest
 */
export interface DefaultApiAppControllerEnqueueRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiAppControllerEnqueue
     */
    readonly id: string
}

/**
 * Request parameters for appControllerGetAllUsers operation in DefaultApi.
 * @export
 * @interface DefaultApiAppControllerGetAllUsersRequest
 */
export interface DefaultApiAppControllerGetAllUsersRequest {
    /**
     * 
     * @type {number}
     * @memberof DefaultApiAppControllerGetAllUsers
     */
    readonly skip: number

    /**
     * 
     * @type {number}
     * @memberof DefaultApiAppControllerGetAllUsers
     */
    readonly take: number

    /**
     * 
     * @type {object}
     * @memberof DefaultApiAppControllerGetAllUsers
     */
    readonly cursor: object

    /**
     * 
     * @type {boolean}
     * @memberof DefaultApiAppControllerGetAllUsers
     */
    readonly business: boolean

    /**
     * 
     * @type {boolean}
     * @memberof DefaultApiAppControllerGetAllUsers
     */
    readonly hasPhone: boolean

    /**
     * 
     * @type {boolean}
     * @memberof DefaultApiAppControllerGetAllUsers
     */
    readonly hasEmail: boolean

    /**
     * 
     * @type {boolean}
     * @memberof DefaultApiAppControllerGetAllUsers
     */
    readonly hasSite: boolean

    /**
     * 
     * @type {string}
     * @memberof DefaultApiAppControllerGetAllUsers
     */
    readonly country: string

    /**
     * 
     * @type {boolean}
     * @memberof DefaultApiAppControllerGetAllUsers
     */
    readonly hasCountry: boolean

    /**
     * 
     * @type {string}
     * @memberof DefaultApiAppControllerGetAllUsers
     */
    readonly followersMax: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiAppControllerGetAllUsers
     */
    readonly followersMin: string

    /**
     * 
     * @type {object}
     * @memberof DefaultApiAppControllerGetAllUsers
     */
    readonly orderBy: object

    /**
     * 
     * @type {string}
     * @memberof DefaultApiAppControllerGetAllUsers
     */
    readonly filterUsername?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiAppControllerGetAllUsers
     */
    readonly filterFullName?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiAppControllerGetAllUsers
     */
    readonly filterSite?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiAppControllerGetAllUsers
     */
    readonly filterEmail?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiAppControllerGetAllUsers
     */
    readonly filterBusinessCategory?: string
}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {DefaultApiAppControllerEnqueueRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public appControllerEnqueue(requestParameters: DefaultApiAppControllerEnqueueRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).appControllerEnqueue(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiAppControllerGetAllUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public appControllerGetAllUsers(requestParameters: DefaultApiAppControllerGetAllUsersRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).appControllerGetAllUsers(requestParameters.skip, requestParameters.take, requestParameters.cursor, requestParameters.business, requestParameters.hasPhone, requestParameters.hasEmail, requestParameters.hasSite, requestParameters.country, requestParameters.hasCountry, requestParameters.followersMax, requestParameters.followersMin, requestParameters.orderBy, requestParameters.filterUsername, requestParameters.filterFullName, requestParameters.filterSite, requestParameters.filterEmail, requestParameters.filterBusinessCategory, options).then((request) => request(this.axios, this.basePath));
    }
}
